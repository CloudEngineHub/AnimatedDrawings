{"pageProps":{"id":"tos","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Content} = _components;\n  if (!Content) _missingMdxReference(\"Content\", true);\n  return _jsxs(Content, {\n    small: true,\n    children: [_jsx(_components.h2, {\n      children: \"Terms of Service\"\n    }), _jsxs(_components.p, {\n      children: [\"Released under \", _jsx(_components.a, {\n        href: \"https://creativecommons.org/licenses/by-nc/4.0/\",\n        children: \"Attribution-NonCommercial 4.0 license\"\n      }), \".\\nSee GitHub Repo for more details.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"currentMetaData":{"title":"Terms of Service","order":-1,"id":"tos"},"allMetaData":[{"id":"home","title":"Home","order":0},{"id":"paper","title":"Paper","order":1},{"id":"dataset","title":"Dataset","order":2}]},"__N_SSG":true}